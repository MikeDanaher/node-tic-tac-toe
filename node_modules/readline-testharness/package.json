{
  "name": "readline-testharness",
  "version": "0.3.0",
  "description": "Harness for testing modules that add functionality to the nodejs readline.",
  "main": "index.js",
  "scripts": {},
  "repository": {
    "type": "git",
    "url": "git://github.com/thlorenz/readline-testharness.git"
  },
  "keywords": [
    "readline",
    "test",
    "harness",
    "mock",
    "fake",
    "stub",
    "simulate"
  ],
  "author": {
    "name": "Thorsten Lorenz",
    "email": "thlorenz@gmx.de",
    "url": "thlorenz.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "devDependencies": {},
  "dependencies": {
    "parse-key": "~0.2.1"
  },
  "readme": "# readline-testharness\n\nHarness for testing modules that add functionality to the nodejs readline.\n\n```js\nvar wraprli= require('./module/totest') \n  , harness = require('readline-testharness')\n  , createHarness = harness.create\n  , createRli = harness.rli;\n  , assert = require('assert');\n\nvar rli = createRli()\n  , hns = createHarness(wraprli, rli);\n\nhns.key('b');\n\nassert.equal(hns.rli.wordLeft, 1, 'moves cursor one word left');\n```\n\n## Installation\n\n    npm i -D readline-testharness\n\n## API\n\n### ***harness.create(wrapperFn[, createRli]);***\n\n- creates a harness to test the given readline interface wrapper function \n- `createRli` (rli mock creator function) is optional and [default one](https://github.com/thlorenz/readline-testharness/blob/master/readline.js) is\n  used if it is not given\n\n#### harness functions/properties\n\n- `hns.rli` the readline interface mock\n- `hns.rlw` the return value of the given `wrapperFn`\n- `hns.key(k)` simulates a key press. `k` is a readline key (i.e. `{ name: 's', ctrl: true }`)\n- `hns.keyed` keeps track of calls to `hns.key` (mainly for test description)\n- `hns.code(c)` simulates a key press with the given code (`c`)\n- `hns.coded` keeps track of calls to `hns.code` (mainly for test description)\n- `hns.seq(s)` simulates a sequence of key presses, one for each char in `s`\n- `hns.seqed` keeps track of calls to `hns.seq` (mainly for test description)\n- `hns.reset` resets the state of the harness (i.e. creates new `rli` and `rlw` and resets `keyed`, `coded` and\n  `seqed`\n- `hns.onreset` assign a function that you want to be called during `hns.reset`\n\n### ***harness.rli()***\n\n- creates a readline interface mock that keeps track of functions called and properties on it\n- it exposes properties of same name as the readline interface functions, i.e., `moveCursor` tracks calls to `_moveCursor` \n- this can be used to create the default one and customize it before passing it to the harness\n- for more info consult [its implementation](https://github.com/thlorenz/readline-testharness/blob/master/readline.js)\n",
  "bugs": {
    "url": "https://github.com/thlorenz/readline-testharness/issues"
  },
  "homepage": "https://github.com/thlorenz/readline-testharness",
  "_id": "readline-testharness@0.3.0",
  "dist": {
    "shasum": "5b37caf8a9ded7a5923845de9d487eec4285e0fe"
  },
  "_from": "readline-testharness@",
  "_resolved": "https://registry.npmjs.org/readline-testharness/-/readline-testharness-0.3.0.tgz"
}
